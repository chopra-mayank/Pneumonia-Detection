{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pneumonia Detection Using Chest X-Ray Images This project leverages deep learning to detect pneumonia from chest X-ray images. It features a VGG16-based Convolutional Neural Network (CNN), a Flask web application for real-time predictions, and performance visualizations. \ud83d\udd0d Project Highlights Model : VGG16-based CNN with transfer learning and dropout regularization. Training : Fine-tuning with the last 4 convolutional layers unfrozen. Visualization : Real-time training visualization (accuracy & loss). Deployment : Flask web app for real-time predictions. \ud83d\udcc1 Repository Structure Training-Pneumonia.py : Script for training the CNN model. Testing-Pneumonia.py : Script for evaluating the model. Score.py : Utility for calculating performance metrics. app.py : Flask application for deploying the model. templates/ and static/ : Directories for Flask's frontend components. requirements.txt : List of Python dependencies. \ud83d\ude80 Getting Started Clone the repository : ```bash git clone https://github.com/chopra-mayank/Pneumonia-Detection.git cd Pneumonia-Detection Install dependencies: bash Copy Edit pip install -r requirements.txt Train the model: bash Copy Edit python Training-Pneumonia.py Run the Flask app: bash Copy Edit python app.py Access the application at http://127.0.0.1:5000/. \ud83d\udcca Performance","title":"Home"},{"location":"#pneumonia-detection-using-chest-x-ray-images","text":"This project leverages deep learning to detect pneumonia from chest X-ray images. It features a VGG16-based Convolutional Neural Network (CNN), a Flask web application for real-time predictions, and performance visualizations.","title":"Pneumonia Detection Using Chest X-Ray Images"},{"location":"#project-highlights","text":"Model : VGG16-based CNN with transfer learning and dropout regularization. Training : Fine-tuning with the last 4 convolutional layers unfrozen. Visualization : Real-time training visualization (accuracy & loss). Deployment : Flask web app for real-time predictions.","title":"\ud83d\udd0d Project Highlights"},{"location":"#repository-structure","text":"Training-Pneumonia.py : Script for training the CNN model. Testing-Pneumonia.py : Script for evaluating the model. Score.py : Utility for calculating performance metrics. app.py : Flask application for deploying the model. templates/ and static/ : Directories for Flask's frontend components. requirements.txt : List of Python dependencies.","title":"\ud83d\udcc1 Repository Structure"},{"location":"#getting-started","text":"Clone the repository : ```bash git clone https://github.com/chopra-mayank/Pneumonia-Detection.git cd Pneumonia-Detection Install dependencies: bash Copy Edit pip install -r requirements.txt Train the model: bash Copy Edit python Training-Pneumonia.py Run the Flask app: bash Copy Edit python app.py Access the application at http://127.0.0.1:5000/. \ud83d\udcca Performance","title":"\ud83d\ude80 Getting Started"},{"location":"how-it-works/","text":"\ud83d\udcc4 docs/how-it-works.md ```markdown How It Works \ud83e\udde0 Model Architecture The core of this project is a Convolutional Neural Network (CNN) based on the VGG16 architecture. Key features include: Transfer Learning : Utilizing pre-trained weights from VGG16 to leverage learned features. Fine-Tuning : Unfreezing the last 4 convolutional layers for retraining on our dataset. Regularization : Implementing dropout layers to prevent overfitting. \ud83c\udfcb\ufe0f Training Process Data Preprocessing : Images are resized and normalized to match the input requirements of VGG16. Training : The model is trained using a binary cross-entropy loss function and an optimizer like Adam. Validation : Performance is monitored on a validation set to tune hyperparameters and prevent overfitting. \ud83d\uddbc\ufe0f Visualization Training progress is visualized using matplotlib, displaying: Accuracy : Comparison between training and validation accuracy over epochs. Loss : Comparison between training and validation loss over epochs. These visualizations help in understanding the model's learning behavior and in diagnosing potential issues.","title":"How it Works"},{"location":"how-it-works/#docshow-it-worksmd","text":"```markdown","title":"\ud83d\udcc4 docs/how-it-works.md"},{"location":"how-it-works/#how-it-works","text":"","title":"How It Works"},{"location":"how-it-works/#model-architecture","text":"The core of this project is a Convolutional Neural Network (CNN) based on the VGG16 architecture. Key features include: Transfer Learning : Utilizing pre-trained weights from VGG16 to leverage learned features. Fine-Tuning : Unfreezing the last 4 convolutional layers for retraining on our dataset. Regularization : Implementing dropout layers to prevent overfitting.","title":"\ud83e\udde0 Model Architecture"},{"location":"how-it-works/#training-process","text":"Data Preprocessing : Images are resized and normalized to match the input requirements of VGG16. Training : The model is trained using a binary cross-entropy loss function and an optimizer like Adam. Validation : Performance is monitored on a validation set to tune hyperparameters and prevent overfitting.","title":"\ud83c\udfcb\ufe0f Training Process"},{"location":"how-it-works/#visualization","text":"Training progress is visualized using matplotlib, displaying: Accuracy : Comparison between training and validation accuracy over epochs. Loss : Comparison between training and validation loss over epochs. These visualizations help in understanding the model's learning behavior and in diagnosing potential issues.","title":"\ud83d\uddbc\ufe0f Visualization"},{"location":"model/","text":"Model Details \ud83c\udfd7\ufe0f Architecture The model is built upon the VGG16 architecture, known for its depth and simplicity. Modifications include: Input Layer : Adjusted to accept grayscale chest X-ray images. Output Layer : A single neuron with a sigmoid activation function for binary classification (Pneumonia vs. Normal). Dropout Layers : Added after dense layers to reduce overfitting. \u2699\ufe0f Training Parameters Optimizer : Adam Loss Function : Binary Cross-Entropy Metrics : Accuracy Epochs : 25 Batch Size : 32 \ud83d\udcc8 Performance Metrics After training, the model achieved: Accuracy : 92% Precision : 90% Recall : 93% F1-Score : 91.5% These metrics indicate a robust model capable of accurately detecting pneumonia from chest X-ray images.","title":"Model Details"},{"location":"model/#model-details","text":"","title":"Model Details"},{"location":"model/#architecture","text":"The model is built upon the VGG16 architecture, known for its depth and simplicity. Modifications include: Input Layer : Adjusted to accept grayscale chest X-ray images. Output Layer : A single neuron with a sigmoid activation function for binary classification (Pneumonia vs. Normal). Dropout Layers : Added after dense layers to reduce overfitting.","title":"\ud83c\udfd7\ufe0f Architecture"},{"location":"model/#training-parameters","text":"Optimizer : Adam Loss Function : Binary Cross-Entropy Metrics : Accuracy Epochs : 25 Batch Size : 32","title":"\u2699\ufe0f Training Parameters"},{"location":"model/#performance-metrics","text":"After training, the model achieved: Accuracy : 92% Precision : 90% Recall : 93% F1-Score : 91.5% These metrics indicate a robust model capable of accurately detecting pneumonia from chest X-ray images.","title":"\ud83d\udcc8 Performance Metrics"}]}